% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bruceR-stats_1_basic.R
\name{add}
\alias{add}
\alias{added}
\alias{addnew}
\title{Create, modify, and delete variables.}
\usage{
add(data, expr, when, by)

added(data, expr, when, by)

addnew(data, expr, when, by)
}
\arguments{
\item{data}{A \code{\link[data.table:data.table]{data.table}}
(preferred).}

\item{expr}{R expression(s) enclosed in \code{{...}} to compute variables.

Passing to \code{\link[data.table:data.table]{data.table}}:
\code{DT[ , `:=`(expr), ]}
(for each line of expression in \code{{...}} one by one,
such that newly created variables are available immediately).}

\item{when}{[Optional] Compute for which rows or rows meeting what condition(s)?

Passing to \code{\link[data.table:data.table]{data.table}}:
\code{DT[when, , ]}.}

\item{by}{[Optional] Compute by what group(s)?

Passing to \code{\link[data.table:data.table]{data.table}}:
\code{DT[ , , by]}.}
}
\value{
\code{add()} returns a new
\code{\link[data.table:data.table]{data.table}},
with the raw data unchanged.

\code{added()} returns nothing and has already changed the raw data.

\code{addnew()} returns only new variables.
}
\description{
Enhanced functions designed to create, modify, and/or delete variables.
The functions \strong{combine} the advantages of
\code{\link[data.table:data.table]{:=}} (data.table),
\code{\link[dplyr:mutate]{mutate}} (dplyr), and
\code{\link[dplyr:transmute]{transmute}} (dplyr).
See examples below for the usage and convenience.
}
\section{Functions}{
\itemize{
\item \code{add}: Return the \emph{new data}.

You need to assign the new data to an object:

\preformatted{data = add(data, {...})}

\item \code{added}: Return nothing and \emph{change the raw data immediately}.

NO need to assign the new data:

\preformatted{added(data, {...})}

\item \code{addnew}: Return only \emph{new variables}.

\preformatted{newvars = addnew(data, {...})}
}}

\examples{
## ====== Usage 1: add() ====== ##

d = as.data.table(within.1)
d$XYZ = 1:8
d

# add() does not change the raw data:
add(d, {B = 1; C = 2})
d

# new data should be assigned to an object:
d = add(d, {
  ID = str_extract(ID, "\\\\d")  # modify a variable
  XYZ = NULL                   # delete a variable
  A = MEAN(d, "A", 1:4)        # create a new variable
  B = A * 4    # new variable is immediately available
  C = 1        # never need ,/; at the end of any line
})
d


## ====== Usage 2: added() ====== ##

d = as.data.table(within.1)
d$XYZ = 1:8
d

# added() has already changed the raw data:
added(d, {B = 1; C = 2})
d

# raw data has already become the new data:
added(d, {
  ID = str_extract(ID, "\\\\d")
  XYZ = NULL
  A = MEAN(d, "A", 1:4)
  B = A * 4
  C = 1
})
d


## ====== Use `when` and `by` ====== ##

d = as.data.table(between.2)
d

added(d, {SCORE2 = SCORE - mean(SCORE)},
      A == 1 & B \%in\% 1:2,
      by=B)
d


## ====== Return New Variables Only ====== ##

newvars = within.1 \%>\% addnew({
  ID = str_extract(ID, "\\\\d")
  A = MEAN(within.1, "A", 1:4)
})
newvars

}
